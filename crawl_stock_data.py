"""
Script thu th·∫≠p d·ªØ li·ªáu ch·ª©ng kho√°n t·ª´ Alpha Vantage API
L∆∞u d·ªØ li·ªáu v√†o th∆∞ m·ª•c datack theo ƒë·ªãnh d·∫°ng CSV
"""

import requests
import time
import csv
import os
from datetime import datetime

# C·∫•u h√¨nh API
API_KEY = "YOUR_ALPHA_VANTAGE_API_KEY"  # ƒêƒÉng k√Ω mi·ªÖn ph√≠ t·∫°i https://www.alphavantage.co/support/#api-key
BASE_URL = "https://www.alphavantage.co/query"

# T·∫°o th∆∞ m·ª•c l∆∞u d·ªØ li·ªáu
DATA_DIR = "datack"
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

def load_symbols(file_path="Crawl_code/symbol.txt"):
    """ƒê·ªçc danh s√°ch m√£ c·ªï phi·∫øu t·ª´ file"""
    symbols = []
    try:
        with open(file_path, 'r') as f:
            for line in f:
                symbol = line.strip()
                if symbol and not symbol.startswith('#'):
                    symbols.append(symbol)
        print(f"ƒê√£ t·∫£i {len(symbols)} m√£ c·ªï phi·∫øu")
        return symbols
    except FileNotFoundError:
        print(f"Kh√¥ng t√¨m th·∫•y file {file_path}")
        # Tr·∫£ v·ªÅ m·ªôt s·ªë m√£ c·ªï phi·∫øu m·∫∑c ƒë·ªãnh
        return ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA', 'FB', 'NVDA', 'JPM', 'V', 'WMT']

def fetch_stock_data(symbol):
    """
    L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ gi√° c·ªï phi·∫øu t·ª´ Alpha Vantage
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        
    Returns:
        dict: D·ªØ li·ªáu th·ªùi gian series ho·∫∑c None n·∫øu l·ªói
    """
    params = {
        'function': 'TIME_SERIES_DAILY',
        'symbol': symbol,
        'apikey': API_KEY,
        'outputsize': 'full',  # L·∫•y to√†n b·ªô d·ªØ li·ªáu (20+ nƒÉm)
        'datatype': 'json'
    }
    
    try:
        print(f"ƒêang t·∫£i d·ªØ li·ªáu cho {symbol}...", end=' ')
        response = requests.get(BASE_URL, params=params, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        
        # Ki·ªÉm tra l·ªói t·ª´ API
        if 'Error Message' in data:
            print(f"‚ùå L·ªói: {data['Error Message']}")
            return None
        
        if 'Note' in data:
            print(f"‚ö†Ô∏è  V∆∞·ª£t gi·ªõi h·∫°n API")
            return None
            
        if 'Time Series (Daily)' in data:
            print("‚úÖ Th√†nh c√¥ng")
            return data['Time Series (Daily)']
        else:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return None

def save_to_csv(symbol, time_series):
    """
    L∆∞u d·ªØ li·ªáu v√†o file CSV
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        time_series: D·ªØ li·ªáu th·ªùi gian series
    """
    if not time_series:
        return
    
    filename = os.path.join(DATA_DIR, f"stock_market_data-{symbol}_2020-12-15.csv")
    
    try:
        with open(filename, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            
            # Header
            writer.writerow(['Date', 'Open', 'High', 'Low', 'Close', 'Volume'])
            
            # S·∫Øp x·∫øp theo ng√†y
            sorted_dates = sorted(time_series.keys(), reverse=True)
            
            # Ghi d·ªØ li·ªáu
            for date in sorted_dates:
                data = time_series[date]
                writer.writerow([
                    date,
                    data.get('1. open', ''),
                    data.get('2. high', ''),
                    data.get('3. low', ''),
                    data.get('4. close', ''),
                    data.get('5. volume', '')
                ])
        
        print(f"  üíæ ƒê√£ l∆∞u v√†o {filename}")
        
    except Exception as e:
        print(f"  ‚ùå L·ªói khi l∆∞u file: {e}")

def crawl_all_stocks(symbols, delay=12):
    """
    Thu th·∫≠p d·ªØ li·ªáu cho t·∫•t c·∫£ c√°c m√£ c·ªï phi·∫øu
    
    Args:
        symbols: Danh s√°ch m√£ c·ªï phi·∫øu
        delay: Th·ªùi gian ch·ªù gi·ªØa c√°c request (gi√¢y) ƒë·ªÉ tr√°nh v∆∞·ª£t gi·ªõi h·∫°n API
    """
    total = len(symbols)
    success = 0
    failed = 0
    
    print(f"\nüöÄ B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu cho {total} m√£ c·ªï phi·∫øu")
    print(f"‚è±Ô∏è  Th·ªùi gian ch·ªù gi·ªØa c√°c request: {delay}s")
    print("=" * 60)
    
    for i, symbol in enumerate(symbols, 1):
        print(f"[{i}/{total}] ", end='')
        
        time_series = fetch_stock_data(symbol)
        
        if time_series:
            save_to_csv(symbol, time_series)
            success += 1
        else:
            failed += 1
        
        # Ch·ªù tr∆∞·ªõc khi request ti·∫øp theo (tr·ª´ l·∫ßn cu·ªëi)
        if i < total:
            print(f"  ‚è≥ Ch·ªù {delay}s...\n")
            time.sleep(delay)
    
    print("\n" + "=" * 60)
    print(f"‚úÖ Ho√†n th√†nh: {success}/{total} th√†nh c√¥ng, {failed} th·∫•t b·∫°i")
    print(f"üìÅ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c: {DATA_DIR}/")

def main():
    """H√†m ch√≠nh"""
    print("=" * 60)
    print("      THU TH·∫¨P D·ªÆ LI·ªÜU CH·ª®NG KHO√ÅN - ALPHA VANTAGE")
    print("=" * 60)
    
    # Ki·ªÉm tra API key
    if API_KEY == "YOUR_ALPHA_VANTAGE_API_KEY":
        print("\n‚ö†Ô∏è  C·∫¢NH B√ÅO: B·∫°n c·∫ßn thay th·∫ø API_KEY b·∫±ng key th·ª±c c·ªßa b·∫°n!")
        print("üìå ƒêƒÉng k√Ω mi·ªÖn ph√≠ t·∫°i: https://www.alphavantage.co/support/#api-key")
        print("\nüí° Ho·∫∑c s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u c√≥ s·∫µn trong th∆∞ m·ª•c datack/")
        return
    
    # T·∫£i danh s√°ch m√£ c·ªï phi·∫øu
    symbols = load_symbols()
    
    # Thu th·∫≠p d·ªØ li·ªáu
    # L∆∞u √Ω: API mi·ªÖn ph√≠ gi·ªõi h·∫°n 5 requests/ph√∫t, 500 requests/ng√†y
    crawl_all_stocks(symbols[:10], delay=15)  # Ch·ªâ l·∫•y 10 m√£ ƒë·∫ßu ti√™n ƒë·ªÉ demo

if __name__ == "__main__":
    main()